import { useState } from 'react';
import { supabase } from '../lib/supabase';
import toast from 'react-hot-toast';

interface OpenRouterResponse {
  id: string;
  choices: {
    message: {
      content: string;
    };
    index: number;
    finish_reason: string;
  }[];
}

export function useOpenRouterAI() {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const callOpenRouterAPI = async (
    prompt: string,
    apiKey: string | null
  ): Promise<string> => {
    if (!apiKey) {
      throw new Error('OpenRouter API key is required. Please add it in Settings > API Keys.');
    }

    const url = 'https://openrouter.ai/api/v1/chat/completions';
    
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`,
        'HTTP-Referer': window.location.origin,
        'X-Title': 'JobTracker AI'
      },
      body: JSON.stringify({
        model: 'deepseek/deepseek-r1-0528:free',
        messages: [
          {
            role: 'system',
            content: 'You are an expert resume and cover letter writer with deep knowledge of ATS optimization and job application best practices.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 4000
      })
    });

    if (!response.ok) {
      let errorMessage = 'Failed to call OpenRouter API';
      try {
        const errorData = await response.json();
        errorMessage = errorData.error?.message || errorMessage;
      } catch (e) {
        // If we can't parse the error, use the default message
      }
      throw new Error(`OpenRouter API error: ${errorMessage}`);
    }

    const data: OpenRouterResponse = await response.json();
    
    // Extract the generated text from the response
    const generatedText = data.choices?.[0]?.message?.content || '';
    
    if (!generatedText) {
      throw new Error('No content generated by OpenRouter API');
    }
    
    return generatedText;
  };

  const getOpenRouterAPIKey = async (): Promise<string | null> => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return null;

      const { data: settings, error } = await supabase
        .from('user_settings')
        .select('openrouter_api_key')
        .eq('user_id', user.id)
        .single();

      if (error) {
        console.error('Error fetching OpenRouter API key:', error);
        return null;
      }

      return settings?.openrouter_api_key || null;
    } catch (error) {
      console.error('Error getting OpenRouter API key:', error);
      return null;
    }
  };

  // Function to get API key with fallbacks
  const getAPIKeyWithFallbacks = async (): Promise<string> => {
    try {
      // Try to get from user settings first
      const userKey = await getOpenRouterAPIKey();
      if (userKey) return userKey;
      
      // Try environment variable next
      if (import.meta.env.VITE_OPENROUTER_API_KEY) {
        return import.meta.env.VITE_OPENROUTER_API_KEY as string;
      }
      
      // No API key found
      throw new Error('OpenRouter API key not found. Please add it in Settings > API Keys (select "OpenRouter AI" as provider) or set VITE_OPENROUTER_API_KEY environment variable.');
    } catch (error) {
      console.error('Error getting OpenRouter API key:', error);
      throw error;
    }
  };

  const generateRelevantExperience = async (
    resumeContent: string,
    jobDescription: string
  ): Promise<string> => {
    setLoading(true);
    setError(null);
    
    try {
      const apiKey = await getAPIKeyWithFallbacks();
      
      if (!apiKey) {
        throw new Error('OpenRouter API key not found. Please add it in Settings > API Keys.');
      }

      const prompt = `
You are an expert resume and cover letter writer. I need you to analyze my resume content and a job description, then write a personalized "Relevant Experience" paragraph for my cover letter.

Focus on matching my experience with the job requirements, highlighting transferable skills, and emphasizing achievements that would be relevant to this position. The output should be in first person and ready to use in my cover letter. 

Format your response as a clean, well-structured paragraph with no headings or bullet points. Use professional language and make it sound natural and conversational.

My Resume:
${resumeContent}

Job Description:
${jobDescription}

Write a concise, professional paragraph (150-200 words) for the "Relevant Experience" section of my cover letter. Focus only on the most relevant experience and skills that match this job. Do not include any headings, bullet points, or formatting instructions in your response - just the clean paragraph text.
`;

      const generatedText = await callOpenRouterAPI(prompt, apiKey);
      return generatedText.trim();
    } catch (error: any) {
      setError(error.message);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const generateWhyCompany = async (
    resumeContent: string,
    companyName: string,
    jobDescription: string
  ): Promise<string> => {
    setLoading(true);
    setError(null);
    
    try {
      const apiKey = await getAPIKeyWithFallbacks();
      
      if (!apiKey) {
        throw new Error('OpenRouter API key not found. Please add it in Settings > API Keys.');
      }

      const prompt = `
You are an expert cover letter writer. I need you to analyze my resume content and a job description, then write a personalized "Why This Company" paragraph for my cover letter.

Focus on explaining why I'm interested in ${companyName} specifically, connecting my background and career goals with the company's mission, values, or projects. The output should be in first person and ready to use in my cover letter. 

Format your response as a clean, well-structured paragraph with no headings or bullet points. Use professional language and make it sound natural and conversational.

My Resume:
${resumeContent}

Job Description:
${jobDescription}

Write a concise, professional paragraph (100-150 words) for the "Why This Company" section of my cover letter. Focus on creating a genuine connection between my background and ${companyName}. Do not include any headings, bullet points, or formatting instructions in your response - just the clean paragraph text.
`;

      const generatedText = await callOpenRouterAPI(prompt, apiKey);
      return generatedText.trim();
    } catch (error: any) {
      setError(error.message);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const generateCoverLetterContent = async (
    resumeContent: string,
    companyName: string,
    jobTitle: string,
    jobDescription: string
  ): Promise<{ relevantExperience: string; whyCompany: string }> => {
    setLoading(true);
    setError(null);
    
    try {
      const apiKey = await getAPIKeyWithFallbacks();
      
      if (!apiKey) {
        throw new Error('OpenRouter API key not found. Please add it in Settings > API Keys.');
      }

      const relevantExperience = await generateRelevantExperience(resumeContent, jobDescription);
      const whyCompany = await generateWhyCompany(resumeContent, companyName, jobDescription);

      return {
        relevantExperience,
        whyCompany
      };
    } catch (error: any) {
      setError(error.message);
      toast.error(error.message || 'Failed to generate content');
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const generateResumeContent = async (
    resumeContent: string,
    jobDescription: string
  ): Promise<string> => {
    setLoading(true);
    setError(null);
    
    try {
      const apiKey = await getAPIKeyWithFallbacks();
      
      if (!apiKey) {
        throw new Error('OpenRouter API key not found. Please add it in Settings > API Keys.');
      }

      const prompt = `
You are an expert resume writer and ATS (Applicant Tracking System) optimizer. Your task is to provide tailored resume suggestions based on the provided resume content and job description.

Focus on extracting key skills, keywords, and responsibilities from the job description, and suggest how the user can incorporate them into their resume's professional summary, experience section (with action verbs and quantifiable achievements), and technical skills section. 

Format your response with clear headings (using # for main headings and ## for subheadings) and bullet points (using * for bullet points). Make sure the formatting is clean and easy to read.

Resume Content:
${resumeContent}

Job Description:
${jobDescription}

Structure your response with these sections:

# KEYWORD OPTIMIZATION
* List 5-10 critical keywords from the job description

# PROFESSIONAL SUMMARY
* Suggest a 2-3 sentence summary tailored to this role

# EXPERIENCE SECTION IMPROVEMENTS
* Provide 3-5 examples of quantifiable achievements using strong action verbs relevant to the job

# TECHNICAL SKILLS TO HIGHLIGHT
* List 5-8 technical skills directly mentioned or implied in the job description

# ATS OPTIMIZATION TIPS
* Give 3-5 general ATS optimization tips

# FORMATTING RECOMMENDATIONS
* Provide 2-3 tips on resume formatting for this specific role
`;

      const generatedText = await callOpenRouterAPI(prompt, apiKey);
      return generatedText.trim();
    } catch (error: any) {
      setError(error.message);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  return {
    loading,
    error,
    generateRelevantExperience,
    generateWhyCompany,
    generateCoverLetterContent,
    generateResumeContent
  };
}