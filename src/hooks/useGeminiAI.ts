import { useState } from 'react';
import { supabase } from '../lib/supabase';
import toast from 'react-hot-toast';

interface GeminiResponse {
  relevantExperience: string;
  whyCompany: string;
}

export function useGeminiAI() {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const callGeminiAPI = async (
    prompt: string,
    apiKey: string | null
  ): Promise<string> => {
    if (!apiKey) {
      throw new Error('Gemini API key is required. Please add it in Settings > API Keys.');
    }

    const url = `https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key=${apiKey}`;
    
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: prompt
              }
            ]
          }
        ],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 8192
        }
      })
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));
      throw new Error(`Gemini API error: ${errorData.error?.message || response.statusText}`);
    }

    const data = await response.json();
    
    // Extract the generated text from the response
    const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text || '';
    
    if (!generatedText) {
      throw new Error('No content generated by Gemini API');
    }
    
    return generatedText;
  };

  const getGeminiAPIKey = async (): Promise<string | null> => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return null;

      const { data: settings, error } = await supabase
        .from('user_settings')
        .select('gemini_api_key')
        .eq('user_id', user.id)
        .single();

      if (error) {
        console.error('Error fetching Gemini API key:', error);
        return null;
      }

      return settings?.gemini_api_key || null;
    } catch (error) {
      console.error('Error getting Gemini API key:', error);
      return null;
    }
  };

  const generateRelevantExperience = async (
    resumeContent: string,
    jobDescription: string
  ): Promise<string> => {
    setLoading(true);
    setError(null);
    
    try {
      const apiKey = await getGeminiAPIKey();
      
      if (!apiKey) {
        throw new Error('Gemini API key not found. Please add it in Settings > API Keys.');
      }

      const prompt = `
You are an expert resume and cover letter writer. I need you to analyze my resume content and a job description, then write a personalized "Relevant Experience" paragraph for my cover letter.

Focus on matching my experience with the job requirements, highlighting transferable skills, and emphasizing achievements that would be relevant to this position. The output should be in first person and ready to use in my cover letter.

My Resume:
${resumeContent}

Job Description:
${jobDescription}

Write a concise, professional paragraph (150-200 words) for the "Relevant Experience" section of my cover letter. Focus only on the most relevant experience and skills that match this job.
`;

      const generatedText = await callGeminiAPI(prompt, apiKey);
      return generatedText.trim();
    } catch (error: any) {
      setError(error.message);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const generateWhyCompany = async (
    resumeContent: string,
    companyName: string,
    jobDescription: string
  ): Promise<string> => {
    setLoading(true);
    setError(null);
    
    try {
      const apiKey = await getGeminiAPIKey();
      
      if (!apiKey) {
        throw new Error('Gemini API key not found. Please add it in Settings > API Keys.');
      }

      const prompt = `
You are an expert cover letter writer. I need you to analyze my resume content and a job description, then write a personalized "Why This Company" paragraph for my cover letter.

Focus on explaining why I'm interested in ${companyName} specifically, connecting my background and career goals with the company's mission, values, or projects. The output should be in first person and ready to use in my cover letter.

My Resume:
${resumeContent}

Job Description:
${jobDescription}

Write a concise, professional paragraph (100-150 words) for the "Why This Company" section of my cover letter. Focus on creating a genuine connection between my background and ${companyName}.
`;

      const generatedText = await callGeminiAPI(prompt, apiKey);
      return generatedText.trim();
    } catch (error: any) {
      setError(error.message);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const generateCoverLetterContent = async (
    resumeContent: string,
    companyName: string,
    jobTitle: string,
    jobDescription: string
  ): Promise<GeminiResponse> => {
    setLoading(true);
    setError(null);
    
    try {
      const apiKey = await getGeminiAPIKey();
      
      if (!apiKey) {
        throw new Error('Gemini API key not found. Please add it in Settings > API Keys.');
      }

      const relevantExperience = await generateRelevantExperience(resumeContent, jobDescription);
      const whyCompany = await generateWhyCompany(resumeContent, companyName, jobDescription);

      return {
        relevantExperience,
        whyCompany
      };
    } catch (error: any) {
      setError(error.message);
      toast.error(error.message || 'Failed to generate content');
      throw error;
    } finally {
      setLoading(false);
    }
  };

  return {
    loading,
    error,
    generateRelevantExperience,
    generateWhyCompany,
    generateCoverLetterContent
  };
}